REPL 
RPL -> read, 

READ  <- citim sirul de caractere pe care vrem sa il interpretam ca o comanda 
Print <- reprezentam sireul de caractere intr-o structura interna (Parser) sa
afisam rezultatul la STDOUT

miniHaskell> :q

sau 

miniHaskell> :quit

miniHaskell> :l file.hs
Not implemented 

Pentru a implementa acest  intereretor, avem urmatoarele fisiere:
Exp.hs -> definsete doua tipuri de date
  Var -> pentru  variabile 
  newtype Var = Var { getVar :: String}

  si complexExp care definsete care sunt expresiile pe care le putem rerpezenta 
  avem reprezentare pentru 
  - variabile 
  - numere naturale
  - lamda-functii
  - aplicari de functii
  - let 
  - letrec
  - liste

  lab2.hs <- rezovarile din lab2
  Main.hs <- trebuie sa permita urmatoarele:
    - afiseaza linia de comanda
      miniHaskell>
    - citesete comanda
    - parseaza comanda
    - daca era quit ->  iese din linia de comanda 
    - daca era load -> afiseaza ca nu eimplementata
    - altefel -> incearca sa parseze expresia citia
    - daca nu s-a putut parsa -> eroare de Parsarea
    - altfel, se afiseaza reprezentarea interna a expresiei

parsing.hs <- definim cum



Parserul pentru comenzile de intrare


module REPLCommand where

import Lab2
import Control.Applicative (many, (<|>))

data REPLCommand
  = Quit
  | Load String
  | Eval String

replCommand :: Parser REPLCommand
replCommand = undefined
