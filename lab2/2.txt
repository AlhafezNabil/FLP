A parser in Haskell is a function that takes an input stream of characters (usually represented as a string) and returns a parsed value, along with the remaining unparsed input. Parsers are commonly used in programming languages and other systems to extract structured data from unstructured input.

Here's an example of a simple parser in Haskell that parses an integer from a string:

    import Data.Char (isDigit)

    type Parser a = String -> Maybe (a, String)

    parseInt :: Parser Int
    parseInt = \input -> case span isDigit input of
    ("", _)  -> Nothing
    (digits, rest) -> Just (read digits, rest)

calling parseResult = parseInt "123hello"

Explination:

    In this example, we define a type alias Parser that represents a function that takes a string input and returns a Maybe tuple containing the parsed value and the remaining unparsed input. The parseInt function is a parser that parses an integer from the input string.

    The span function is used to extract a prefix of the input string consisting of digits. The isDigit function is used as the predicate to determine if a character is a digit or not. The read function is used to convert the digit string into an integer.

    The case expression is used to handle two cases: if the digit string is empty (i.e., there are no digits in the input), the parser returns Nothing, indicating that the input could not be parsed. Otherwise, the parsed integer and the remaining unparsed input are returned as a Just tuple.




Parser a - un tip de date in Haskell pentru a putea implementa parsere pentru obiecte de timpul a 


newType Parser a = Parser { apply :: String -> [(a, string)]}

> :t apply 
apply:: Parser a -> String -> [(a, String)]


am facut cateva exemple simple si frumoase pentru Parse cChar 

staisfy :: (Char -> Bool ) -> Parser Char 

-- acel parse construit pentru a accepta drept token valid orice caracter 
anChar :: Parser CharanCHar = satisfgy (\_ -> True)

digit :: Parser CHar 
digit = satisfy isDigit

> apply digit "123"
[("1", "23")]

> apply digit "23"
[("23", "3")]

> apply digit "3"
[("3", "")]

> apply digit ""
[]

"123" -> [("1", "23")] -> [("23", "3")] -> [("3", "")] -> []
            ^                ^                ^
            token valid     token valie     token valid

> apply digit "1ab"
[("1", "ab")]

> apply digit "ab"
[]

ce face parserul?
- consuma sirul de intare - determinist
    - il parcuge recursiv pana la elemenut l de baza - ""
        in cazul in care toate caracterele pot fi parsate 
    - ori il parcurge pana lap rimul caracter care nu poate fil parsat 
- caracterul pur functional al parserului consta in procesarea sirului de intrare
"123" -> "23" -> "3" -> "" -> stop
"lab" -> "ab" -> stop

- se produce un efect lateral, si anume identificarea tokenului valid

- Comportamentul Monadic imi permite sa procesez determinsit inputul , 
dar sa propag si efecte laterale - tokenii obtinuti in urma evaluarii.

Pentru a contrui o Monada, am nevoie de gunctor si applicative.

Functor :         f -> [c] v -> [c] f v
Applicative:  [c] f -> [c] v -> [c] f v

-- imi permite secvetierea actiunilor pentru care alegerea unei actiuni 
-- viitoare depinde de rezultatul actiunii curente 
instance Monad Parser where
pa >>= k = Parser (\input -> [(b, restb) | 
    (a, resta) <- apply pa input,
    (b, restb) <- apply (k a) resta])

Monadele permit scrierea in do-notation

Daca vrem sa definim un Parser care sa identifice cifrele scrise intre paranteze 
"(5)" -> 5

char :: Char -> Parser Char 
char c = satisfy (\x -> x == c)

digit :: Parser Char 
digit = satisfy  isDigit
 
cifParanteze :: Parser Int 
cifParanteze = do 
    char '('
    d <- digit 
    char ')'
    return (digitinToInt d)

> apply cifParanteze "(5)"


-- Ex
-- sa se scrie un parser care sa identifice o cifra predata de un semn (+ sau -)

din "+6" sa recunoasca  6
din "-6" sa recunoasca -6


cifsemn :: Parser 
cifSemn = do
    ch <- satisfy (\x -> elem x "+-")
    d <- digitToInt <$> digit
    case ch of 
        '+' -> return  d
        _ -> return (-d)

> apply cifSemn "-6"
[(-6, "")]


-- Exercituiul 2
-- Implementati aceeasi functie, dar folosind doar Applicative - doar pure 
si <*>, FARA monade 
cifSemn' :: ParserInt
cifSemn' ::     
        pure convert <*> 
        satisfy(\x -> elem x "+-") <*>
        (digitToInt <$> digit)
    where 
        convert '+' d =  d
        convert '-' d = -d

convert '+' 2 = 2
:t covert :: Char -> Int -> Int
:t pure covert :: Parser (Char -> Int -> Int)

pure convert                        <*> satisfy (\x -> elem x "+-")
Parser (Char -> Int -> Int)         <*> Parser Char
------------------------------------------------
Parser (Int -> Int)                 <*> satisfy (digitToInt )


fmap :: (Char -> Int) -> Parser Char -> Parser Int

-- Ex 3
Sa se scrie un parser pentru String,
string :: String -> Parser String
care sa parseze in functie de un keyword specificat.

de exemplu:

> apply (string "Hi") "Hike"
[("Hi", "ke")]

> apply (string "Mai") "Maybe"
[]

> apply (string "Re") "Restanta"
[("Re", "stanta")]

> apply (string "Ma") "Marire"
[("Ma", "rire")]

string :: String -> Parser String
string [] = return []
string (x:xs) =
    char x 
    string xs 
    return (x:xs)
--- sau 
--- mai po scrie cazul general 
string (x:xs) = pure (:) <*> char x <*> string xs 

- Tema de la Parsarea mai multor alternative  pana la sfarsit 
- pana la lab urmator
- trimitere spre bogdan.macovei.fmi@gmail.com